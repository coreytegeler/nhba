.button.open
aside
	.shadow
		header
			.tabs
				.tab.filter(data-section='filter')= 'Filters'
				.tab.glossary(data-section='glossary')= 'Glossary'
				.tab.search
					form.search(method='post' action='/search/')
						input(name='query', type='text', placeholder='Search')
				.buttons
					.tab.info.button(data-section='info')
					.tab.close.button
		.inner
			section#info
				h1= 'New Haven Building Archive'
				.group.mapGroup
					.mapWrap.show
						.map
						.loader
				for info in models['info']
					.group(class=info.slug) !{info.text}
						//- li Contributors: 
						//- 	br
						//- 	for building, i in models.buildings
						//- 		if(building.researchBy)
						//- 			| #{building.researchBy}
						//- 			br
									//- if(i == (models.buildings.length - 2))
									//- 	| &nbsp;&amp;&nbsp;
									//- else if(i != (models.buildings.length - 1))
									//- 	| &#44;&nbsp;
			section#filter
				.clear= 'Clear Filter'
				ul.group.filters.nested
					li.use
						.title(data-slug='use') Use
						ul.use
							-var uses = models['use']
							for use, useType in uses
								li.useType.withSub
									if(uses[useType].uses)
										.title(data-slug=useType)= uses[useType].name
										ul.sub(class=useType)
											for use in uses[useType].uses
												li(class=use.slug)
													a.filter.subfilter(href='/?use='+use.slug, data-slug=use.slug, data-id=use.slug, data-type='use') #{use.name}
									else
										li(class=use.slug)
											a.filter.subfilter(href='/?use='+use.slug, data-slug=use.slug, data-id=use.slug, data-type='use') #{use.name}
					+filter('style', 'Style', models['style'])
					li.era
						-var eras = ['1638-1860', '1860-1910', '1910-1950', '1950-1980', '1980-Today']
						.title(data-slug='era')= 'Era'
						ul.era
							for era in eras
								li(class='era')
									a.filter(href='/?era='+era, data-slug=era, data-id=era, data-type='era') #{era}
					+filter('neighborhood', 'Neighborhood', models['neighborhood'])
					+filter('tour', 'Tour', models['tour'])


			section#glossary
				-var currentAlpha
				each term in models['glossary']
					-var termAlpha = term.name.charAt(0)
					if(termAlpha != currentAlpha)
						-currentAlpha = termAlpha
						.alpha= termAlpha
					.term
						.name= term.name
						.definition
							| !{term.definition}
			section#single